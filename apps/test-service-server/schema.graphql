# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumUserTeamRole {
  Option_1
}

type Event {
  createdAt: DateTime!
  date: DateTime
  id: String!
  location: String
  name: String
  team: Team
  updatedAt: DateTime!
}

input EventCreateInput {
  date: DateTime
  location: String
  name: String
  team: TeamWhereUniqueInput
}

input EventCreateNestedManyWithoutTeamsInput {
  connect: [EventWhereUniqueInput!]
}

input EventListRelationFilter {
  every: EventWhereInput
  none: EventWhereInput
  some: EventWhereInput
}

input EventOrderByInput {
  createdAt: SortOrder
  date: SortOrder
  id: SortOrder
  location: SortOrder
  name: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
}

input EventUpdateInput {
  date: DateTime
  location: String
  name: String
  team: TeamWhereUniqueInput
}

input EventUpdateManyWithoutTeamsInput {
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
}

input EventWhereInput {
  date: DateTimeNullableFilter
  id: StringFilter
  location: StringNullableFilter
  name: StringNullableFilter
  team: TeamWhereUniqueInput
}

input EventWhereUniqueInput {
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createTeam(data: TeamCreateInput!): Team!
  createUser(data: UserCreateInput!): User!
  createUserTeam(data: UserTeamCreateInput!): UserTeam!
  deleteEvent(where: EventWhereUniqueInput!): Event!
  deleteTeam(where: TeamWhereUniqueInput!): Team!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteUserTeam(where: UserTeamWhereUniqueInput!): UserTeam!
  login(credentials: Credentials!): UserInfo!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateUserTeam(data: UserTeamUpdateInput!, where: UserTeamWhereUniqueInput!): UserTeam!
}

type Query {
  GetUsersForEvent(args: String!): [User!]!
  _eventsMeta(where: EventWhereInput): MetaQueryPayload!
  _teamsMeta(where: TeamWhereInput): MetaQueryPayload!
  _userTeamsMeta(where: UserTeamWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  event(where: EventWhereUniqueInput!): Event
  events(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): [Event!]!
  team(where: TeamWhereUniqueInput!): Team
  teams(orderBy: [TeamOrderByInput!], skip: Float, take: Float, where: TeamWhereInput): [Team!]!
  user(where: UserWhereUniqueInput!): User
  userTeam(where: UserTeamWhereUniqueInput!): UserTeam
  userTeams(orderBy: [UserTeamOrderByInput!], skip: Float, take: Float, where: UserTeamWhereInput): [UserTeam!]!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Team {
  createdAt: DateTime!
  createdBy: String
  description: String
  events(orderBy: [EventOrderByInput!], skip: Float, take: Float, where: EventWhereInput): [Event!]!
  id: String!
  name: String
  updatedAt: DateTime!
  userTeams(orderBy: [UserTeamOrderByInput!], skip: Float, take: Float, where: UserTeamWhereInput): [UserTeam!]!
}

input TeamCreateInput {
  createdBy: String
  description: String
  events: EventCreateNestedManyWithoutTeamsInput
  name: String
  userTeams: UserTeamCreateNestedManyWithoutTeamsInput
}

input TeamOrderByInput {
  createdAt: SortOrder
  createdBy: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TeamUpdateInput {
  createdBy: String
  description: String
  events: EventUpdateManyWithoutTeamsInput
  name: String
  userTeams: UserTeamUpdateManyWithoutTeamsInput
}

input TeamWhereInput {
  createdBy: StringNullableFilter
  description: StringNullableFilter
  events: EventListRelationFilter
  id: StringFilter
  name: StringNullableFilter
  userTeams: UserTeamListRelationFilter
}

input TeamWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  userTeams(orderBy: [UserTeamOrderByInput!], skip: Float, take: Float, where: UserTeamWhereInput): [UserTeam!]!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  userTeams: UserTeamCreateNestedManyWithoutUsersInput
  username: String!
}

type UserInfo {
  accessToken: String!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type UserTeam {
  createdAt: DateTime!
  id: String!
  role: EnumUserTeamRole
  team: Team
  updatedAt: DateTime!
  user: User
}

input UserTeamCreateInput {
  role: EnumUserTeamRole
  team: TeamWhereUniqueInput
  user: UserWhereUniqueInput
}

input UserTeamCreateNestedManyWithoutTeamsInput {
  connect: [UserTeamWhereUniqueInput!]
}

input UserTeamCreateNestedManyWithoutUsersInput {
  connect: [UserTeamWhereUniqueInput!]
}

input UserTeamListRelationFilter {
  every: UserTeamWhereInput
  none: UserTeamWhereInput
  some: UserTeamWhereInput
}

input UserTeamOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  role: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserTeamUpdateInput {
  role: EnumUserTeamRole
  team: TeamWhereUniqueInput
  user: UserWhereUniqueInput
}

input UserTeamUpdateManyWithoutTeamsInput {
  connect: [UserTeamWhereUniqueInput!]
  disconnect: [UserTeamWhereUniqueInput!]
  set: [UserTeamWhereUniqueInput!]
}

input UserTeamUpdateManyWithoutUsersInput {
  connect: [UserTeamWhereUniqueInput!]
  disconnect: [UserTeamWhereUniqueInput!]
  set: [UserTeamWhereUniqueInput!]
}

input UserTeamWhereInput {
  id: StringFilter
  role: EnumUserTeamRole
  team: TeamWhereUniqueInput
  user: UserWhereUniqueInput
}

input UserTeamWhereUniqueInput {
  id: String!
}

input UserUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  roles: JSON
  userTeams: UserTeamUpdateManyWithoutUsersInput
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  userTeams: UserTeamListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
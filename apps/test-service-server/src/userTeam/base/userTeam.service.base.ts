/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserTeam as PrismaUserTeam,
  Team as PrismaTeam,
  User as PrismaUser,
} from "@prisma/client";

export class UserTeamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserTeamCountArgs, "select">): Promise<number> {
    return this.prisma.userTeam.count(args);
  }

  async userTeams(
    args: Prisma.UserTeamFindManyArgs
  ): Promise<PrismaUserTeam[]> {
    return this.prisma.userTeam.findMany(args);
  }
  async userTeam(
    args: Prisma.UserTeamFindUniqueArgs
  ): Promise<PrismaUserTeam | null> {
    return this.prisma.userTeam.findUnique(args);
  }
  async createUserTeam(
    args: Prisma.UserTeamCreateArgs
  ): Promise<PrismaUserTeam> {
    return this.prisma.userTeam.create(args);
  }
  async updateUserTeam(
    args: Prisma.UserTeamUpdateArgs
  ): Promise<PrismaUserTeam> {
    return this.prisma.userTeam.update(args);
  }
  async deleteUserTeam(
    args: Prisma.UserTeamDeleteArgs
  ): Promise<PrismaUserTeam> {
    return this.prisma.userTeam.delete(args);
  }

  async getTeam(parentId: string): Promise<PrismaTeam | null> {
    return this.prisma.userTeam
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userTeam
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

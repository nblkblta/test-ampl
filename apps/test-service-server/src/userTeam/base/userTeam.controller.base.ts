/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserTeamService } from "../userTeam.service";
import { UserTeamCreateInput } from "./UserTeamCreateInput";
import { UserTeam } from "./UserTeam";
import { UserTeamFindManyArgs } from "./UserTeamFindManyArgs";
import { UserTeamWhereUniqueInput } from "./UserTeamWhereUniqueInput";
import { UserTeamUpdateInput } from "./UserTeamUpdateInput";

export class UserTeamControllerBase {
  constructor(protected readonly service: UserTeamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserTeam })
  async createUserTeam(
    @common.Body() data: UserTeamCreateInput
  ): Promise<UserTeam> {
    return await this.service.createUserTeam({
      data: {
        ...data,

        team: data.team
          ? {
              connect: data.team,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        role: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserTeam] })
  @ApiNestedQuery(UserTeamFindManyArgs)
  async userTeams(@common.Req() request: Request): Promise<UserTeam[]> {
    const args = plainToClass(UserTeamFindManyArgs, request.query);
    return this.service.userTeams({
      ...args,
      select: {
        createdAt: true,
        id: true,
        role: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userTeam(
    @common.Param() params: UserTeamWhereUniqueInput
  ): Promise<UserTeam | null> {
    const result = await this.service.userTeam({
      where: params,
      select: {
        createdAt: true,
        id: true,
        role: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserTeam(
    @common.Param() params: UserTeamWhereUniqueInput,
    @common.Body() data: UserTeamUpdateInput
  ): Promise<UserTeam | null> {
    try {
      return await this.service.updateUserTeam({
        where: params,
        data: {
          ...data,

          team: data.team
            ? {
                connect: data.team,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          role: true,

          team: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserTeam(
    @common.Param() params: UserTeamWhereUniqueInput
  ): Promise<UserTeam | null> {
    try {
      return await this.service.deleteUserTeam({
        where: params,
        select: {
          createdAt: true,
          id: true,
          role: true,

          team: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserTeam } from "./UserTeam";
import { UserTeamCountArgs } from "./UserTeamCountArgs";
import { UserTeamFindManyArgs } from "./UserTeamFindManyArgs";
import { UserTeamFindUniqueArgs } from "./UserTeamFindUniqueArgs";
import { CreateUserTeamArgs } from "./CreateUserTeamArgs";
import { UpdateUserTeamArgs } from "./UpdateUserTeamArgs";
import { DeleteUserTeamArgs } from "./DeleteUserTeamArgs";
import { Team } from "../../team/base/Team";
import { User } from "../../user/base/User";
import { UserTeamService } from "../userTeam.service";
@graphql.Resolver(() => UserTeam)
export class UserTeamResolverBase {
  constructor(protected readonly service: UserTeamService) {}

  async _userTeamsMeta(
    @graphql.Args() args: UserTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserTeam])
  async userTeams(
    @graphql.Args() args: UserTeamFindManyArgs
  ): Promise<UserTeam[]> {
    return this.service.userTeams(args);
  }

  @graphql.Query(() => UserTeam, { nullable: true })
  async userTeam(
    @graphql.Args() args: UserTeamFindUniqueArgs
  ): Promise<UserTeam | null> {
    const result = await this.service.userTeam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserTeam)
  async createUserTeam(
    @graphql.Args() args: CreateUserTeamArgs
  ): Promise<UserTeam> {
    return await this.service.createUserTeam({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserTeam)
  async updateUserTeam(
    @graphql.Args() args: UpdateUserTeamArgs
  ): Promise<UserTeam | null> {
    try {
      return await this.service.updateUserTeam({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTeam)
  async deleteUserTeam(
    @graphql.Args() args: DeleteUserTeamArgs
  ): Promise<UserTeam | null> {
    try {
      return await this.service.deleteUserTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  async getTeam(@graphql.Parent() parent: UserTeam): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserTeam): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
